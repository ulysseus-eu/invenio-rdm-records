#
# This file is part of Invenio.
# Copyright (C) 2023-2024 CERN.
#
# Invenio is free software; you can redistribute it and/or modify it
# under the terms of the MIT License; see LICENSE file for more details.

"""Create media files table."""

import sqlalchemy as sa
from alembic import op
from sqlalchemy.dialects import mysql, postgresql
from sqlalchemy_utils import JSONType, UUIDType

# revision identifiers, used by Alembic.
revision = "ff860d48fb4b"
down_revision = "cfcb8cb78708"
branch_labels = ()
depends_on = None


def upgrade():
    """Upgrade database."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "rdm_drafts_media_files",
        sa.Column(
            "created",
            sa.DateTime().with_variant(mysql.DATETIME(fsp=6), "mysql"),
            nullable=False,
        ),
        sa.Column(
            "updated",
            sa.DateTime().with_variant(mysql.DATETIME(fsp=6), "mysql"),
            nullable=False,
        ),
        sa.Column("id", UUIDType(), nullable=False),
        sa.Column(
            "json",
            sa.JSON()
            .with_variant(JSONType(), "mysql")
            .with_variant(
                postgresql.JSONB(none_as_null=True, astext_type=sa.Text()), "postgresql"
            )
            .with_variant(JSONType(), "sqlite"),
            nullable=True,
        ),
        sa.Column("version_id", sa.Integer(), nullable=False),
        sa.Column(
            "key",
            sa.Text().with_variant(mysql.VARCHAR(length=255), "mysql"),
            nullable=False,
        ),
        sa.Column("record_id", UUIDType(), nullable=False),
        sa.Column("object_version_id", UUIDType(), nullable=True),
        sa.ForeignKeyConstraint(
            ["object_version_id"],
            ["files_object.version_id"],
            name=op.f("fk_rdm_drafts_media_files_object_version_id_files_object"),
            ondelete="RESTRICT",
        ),
        sa.ForeignKeyConstraint(
            ["record_id"],
            ["rdm_drafts_metadata.id"],
            name=op.f("fk_rdm_drafts_media_files_record_id_rdm_drafts_metadata"),
            ondelete="RESTRICT",
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_rdm_drafts_media_files")),
    )
    op.create_index(
        "uidx_rdm_drafts_media_files_id_key",
        "rdm_drafts_media_files",
        ["id", "key"],
        unique=True,
    )
    op.create_table(
        "rdm_records_media_files",
        sa.Column(
            "created",
            sa.DateTime().with_variant(mysql.DATETIME(fsp=6), "mysql"),
            nullable=False,
        ),
        sa.Column(
            "updated",
            sa.DateTime().with_variant(mysql.DATETIME(fsp=6), "mysql"),
            nullable=False,
        ),
        sa.Column("id", UUIDType(), nullable=False),
        sa.Column(
            "json",
            sa.JSON()
            .with_variant(JSONType(), "mysql")
            .with_variant(
                postgresql.JSONB(none_as_null=True, astext_type=sa.Text()), "postgresql"
            )
            .with_variant(JSONType(), "sqlite"),
            nullable=True,
        ),
        sa.Column("version_id", sa.Integer(), nullable=False),
        sa.Column(
            "key",
            sa.Text().with_variant(mysql.VARCHAR(length=255), "mysql"),
            nullable=False,
        ),
        sa.Column("record_id", UUIDType(), nullable=False),
        sa.Column("object_version_id", UUIDType(), nullable=True),
        sa.ForeignKeyConstraint(
            ["object_version_id"],
            ["files_object.version_id"],
            name=op.f("fk_rdm_records_media_files_object_version_id_files_object"),
            ondelete="RESTRICT",
        ),
        sa.ForeignKeyConstraint(
            ["record_id"],
            ["rdm_records_metadata.id"],
            name=op.f("fk_rdm_records_media_files_record_id_rdm_records_metadata"),
            ondelete="RESTRICT",
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_rdm_records_media_files")),
    )
    op.create_index(
        "uidx_rdm_records_media_files_id_key",
        "rdm_records_media_files",
        ["id", "key"],
        unique=True,
    )
    op.add_column(
        "rdm_drafts_metadata",
        sa.Column("media_bucket_id", UUIDType(), nullable=True),
    )
    op.create_foreign_key(
        op.f("fk_rdm_drafts_metadata_media_bucket_id_files_bucket"),
        "rdm_drafts_metadata",
        "files_bucket",
        ["media_bucket_id"],
        ["id"],
    )
    op.add_column(
        "rdm_records_metadata",
        sa.Column("media_bucket_id", UUIDType(), nullable=True),
    )
    op.create_foreign_key(
        op.f("fk_rdm_records_metadata_media_bucket_id_files_bucket"),
        "rdm_records_metadata",
        "files_bucket",
        ["media_bucket_id"],
        ["id"],
    )
    op.add_column(
        "rdm_records_metadata_version",
        sa.Column(
            "media_bucket_id",
            UUIDType(),
            autoincrement=False,
            nullable=True,
        ),
    )
    # ### end Alembic commands ###


def downgrade():
    """Downgrade database."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_column("rdm_records_metadata_version", "media_bucket_id")
    op.drop_constraint(
        op.f("fk_rdm_records_metadata_media_bucket_id_files_bucket"),
        "rdm_records_metadata",
        type_="foreignkey",
    )
    op.drop_column("rdm_records_metadata", "media_bucket_id")
    op.drop_constraint(
        op.f("fk_rdm_drafts_metadata_media_bucket_id_files_bucket"),
        "rdm_drafts_metadata",
        type_="foreignkey",
    )
    op.drop_column("rdm_drafts_metadata", "media_bucket_id")
    op.drop_index(
        "uidx_rdm_records_media_files_id_key", table_name="rdm_records_media_files"
    )
    op.drop_table("rdm_records_media_files")
    op.drop_index(
        "uidx_rdm_drafts_media_files_id_key", table_name="rdm_drafts_media_files"
    )
    op.drop_table("rdm_drafts_media_files")
    # ### end Alembic commands ###
